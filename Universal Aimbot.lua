-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,'))()
